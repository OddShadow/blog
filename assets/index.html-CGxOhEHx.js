import{_ as e,c as l,o as n,a}from"./app-C3RyoKhS.js";const i={},s=a(`<h2 id="_1-数据库事务概述" tabindex="-1"><a class="header-anchor" href="#_1-数据库事务概述"><span>1. 数据库事务概述</span></a></h2><p>事务是数据库区别于文件系统的重要特性之一，当我们有了事务就会让数据库始终保持<strong>一致性</strong>，同时我们还能通过事务的机制<strong>恢复到某个时间点</strong>，这样可以保证已经已经提交到数据库的修改不会因为系统奔溃而丢失。</p><h3 id="_1-1-存储引擎支持情况" tabindex="-1"><a class="header-anchor" href="#_1-1-存储引擎支持情况"><span>1.1 存储引擎支持情况</span></a></h3><p><code>SHOW ENGINES</code> 查看当前 MySQL 支持的存储引擎有哪些，以及这些存储引擎是否支持事务。</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre><code><span class="line">mysql&gt; show engines;</span>
<span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span>
<span class="line">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span>
<span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span>
<span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</span>
<span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |</span>
<span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |</span>
<span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |</span>
<span class="line">| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |</span>
<span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |</span>
<span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |</span>
<span class="line">| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |</span>
<span class="line">| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |</span>
<span class="line">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span>
<span class="line">9 rows in set (0.00 sec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在 MySQL 中只有 InnoDB 支持事务</strong></p><h3 id="_1-2-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-2-基本概念"><span>1.2 基本概念</span></a></h3><p><strong>事务</strong>: 一组逻辑操作单元，使数据从一种状态变换到另一种状态 事务处理的原则：保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交( commit )，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务回滚( rollback )到最初状态。</p><h3 id="_1-3-事务特性-acid" tabindex="-1"><a class="header-anchor" href="#_1-3-事务特性-acid"><span>1.3 事务特性 ACID</span></a></h3><ul><li><strong>原子性</strong> - atomicity 事务中的操作像原子一样不可分割，要么全部提交，要么失败回滚。</li><li><strong>一致性</strong> - consistency 事务执行前后，数据从一个合法性状态变成另一个合法性状态，和具体业务合法性关联。 比如在A转B的一次转账中，A和B账户的余额大于零，A和B账户余额总和在转账前后不变。</li><li><strong>隔离性</strong> - isolation 事务之间相互不干扰，不冲突。</li><li><strong>持久性</strong> - durability 事务最终要落盘。 持久性是通过重做日志和回滚日志保证的，即使数据库宕机重启也可以找回数据。</li></ul><h3 id="_1-4-事务的状态" tabindex="-1"><a class="header-anchor" href="#_1-4-事务的状态"><span>1.4 事务的状态</span></a></h3><ul><li>活动的 - active</li><li>部分提交的 - partially committed</li><li>失败的 - failed</li><li>中止的 - aborted</li><li>提交的 - committed ![[20240627142859465.png|500]]</li></ul><h2 id="_2-如何使用事务" tabindex="-1"><a class="header-anchor" href="#_2-如何使用事务"><span>2. 如何使用事务</span></a></h2><h3 id="_2-1-显式事务" tabindex="-1"><a class="header-anchor" href="#_2-1-显式事务"><span>2.1 显式事务</span></a></h3><p><code>start transaction;</code> 或者 <code>begin;</code> 两者都可以开启事务，区别在于 <code>start transaction;</code> 可以接几个修饰符</p><ol><li>read only，只读事务</li><li>read write，读写事务</li><li>with consistent snapshot，启动一致性读</li></ol><h3 id="_2-2-隐式事务" tabindex="-1"><a class="header-anchor" href="#_2-2-隐式事务"><span>2.2 隐式事务</span></a></h3><p><code>show variables like &#39;autocommit&#39;;</code> 开启表示，开启了自动提交</p><h2 id="_3-事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-事务的隔离级别"><span>3. 事务的隔离级别</span></a></h2><p>MySQL是一个客户端／服务器架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称为一个会话（Session ）。每个客户端都可以在自己的会话中向服务器发出请求语句，一个请求语句可能是某个事务的一部分，也就是对于服务器来说可能同时处理多个事务。事务有隔离性的特性，理论上在某个事务对某个数据进行访问时，其他事务应该进行排队，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样对性能影响太大，我们既想保持事务的隔离性，又想让服务器在处理访问同一数据的多个事务时性能尽量高些，那就看二者如何权衡取舍了。</p><h3 id="_3-1-数据准备" tabindex="-1"><a class="header-anchor" href="#_3-1-数据准备"><span>3.1 数据准备</span></a></h3><h3 id="_3-2-数据并发问题" tabindex="-1"><a class="header-anchor" href="#_3-2-数据并发问题"><span>3.2 数据并发问题</span></a></h3><ol><li>脏写</li><li>脏读</li><li>不可重复读</li><li>幻读</li></ol><h3 id="_3-3-sql-中四种隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-3-sql-中四种隔离级别"><span>3.3 SQL 中四种隔离级别</span></a></h3><ol><li>读未提交 read uncommitted</li><li>读已提交 read commited</li><li>可重复度 repeatable read</li><li>串行化 serializable</li></ol><table><thead><tr><th>隔离级别</th><th>脏读可能性</th><th>不可重复读可能性</th><th>幻读可能性</th><th>加锁读</th></tr></thead><tbody><tr><td>读未提交</td><td>yes</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>读已提交</td><td>no</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>可重复度</td><td>no</td><td>no</td><td>yes</td><td>no</td></tr><tr><td>串行化</td><td>no</td><td>no</td><td>no</td><td>yes</td></tr></tbody></table><h3 id="_3-4-mysql-支持的四种隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-4-mysql-支持的四种隔离级别"><span>3.4 MySQL 支持的四种隔离级别</span></a></h3><p>查看隔离级别 <code>SELECT @@transaction_isolation;</code></p><h3 id="_3-5-如何设置事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-5-如何设置事务的隔离级别"><span>3.5 如何设置事务的隔离级别</span></a></h3><p><code>SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL 隔离级别;</code><code>SET [GLOBAL|SESSION] TRANSACTION_ISOLATION = &#39;隔离级别&#39;;</code></p><ol><li>READ UNCOMMITTED</li><li>READ COMMITTED</li><li>REPEATABLE READ</li><li>SERIALIZABLE</li></ol><h3 id="_3-6-不同隔离级别举例" tabindex="-1"><a class="header-anchor" href="#_3-6-不同隔离级别举例"><span>3.6 不同隔离级别举例</span></a></h3><h2 id="_4-事务的常见分类" tabindex="-1"><a class="header-anchor" href="#_4-事务的常见分类"><span>4. 事务的常见分类</span></a></h2>`,33),t=[s];function d(r,c){return n(),l("div",null,t)}const h=e(i,[["render",d],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/article/wvbe8ab2/","title":"事务","lang":"zh-CN","frontmatter":{"title":"事务","author":null,"createTime":"2024/08/08 13:30:49","permalink":"/article/wvbe8ab2/"},"headers":[{"level":2,"title":"1. 数据库事务概述","slug":"_1-数据库事务概述","link":"#_1-数据库事务概述","children":[{"level":3,"title":"1.1 存储引擎支持情况","slug":"_1-1-存储引擎支持情况","link":"#_1-1-存储引擎支持情况","children":[]},{"level":3,"title":"1.2 基本概念","slug":"_1-2-基本概念","link":"#_1-2-基本概念","children":[]},{"level":3,"title":"1.3 事务特性 ACID","slug":"_1-3-事务特性-acid","link":"#_1-3-事务特性-acid","children":[]},{"level":3,"title":"1.4 事务的状态","slug":"_1-4-事务的状态","link":"#_1-4-事务的状态","children":[]}]},{"level":2,"title":"2. 如何使用事务","slug":"_2-如何使用事务","link":"#_2-如何使用事务","children":[{"level":3,"title":"2.1 显式事务","slug":"_2-1-显式事务","link":"#_2-1-显式事务","children":[]},{"level":3,"title":"2.2 隐式事务","slug":"_2-2-隐式事务","link":"#_2-2-隐式事务","children":[]}]},{"level":2,"title":"3. 事务的隔离级别","slug":"_3-事务的隔离级别","link":"#_3-事务的隔离级别","children":[{"level":3,"title":"3.1 数据准备","slug":"_3-1-数据准备","link":"#_3-1-数据准备","children":[]},{"level":3,"title":"3.2 数据并发问题","slug":"_3-2-数据并发问题","link":"#_3-2-数据并发问题","children":[]},{"level":3,"title":"3.3 SQL 中四种隔离级别","slug":"_3-3-sql-中四种隔离级别","link":"#_3-3-sql-中四种隔离级别","children":[]},{"level":3,"title":"3.4 MySQL 支持的四种隔离级别","slug":"_3-4-mysql-支持的四种隔离级别","link":"#_3-4-mysql-支持的四种隔离级别","children":[]},{"level":3,"title":"3.5 如何设置事务的隔离级别","slug":"_3-5-如何设置事务的隔离级别","link":"#_3-5-如何设置事务的隔离级别","children":[]},{"level":3,"title":"3.6 不同隔离级别举例","slug":"_3-6-不同隔离级别举例","link":"#_3-6-不同隔离级别举例","children":[]}]},{"level":2,"title":"4. 事务的常见分类","slug":"_4-事务的常见分类","link":"#_4-事务的常见分类","children":[]}],"git":{"updatedTime":1723469180000,"contributors":[{"name":"Rick","email":"mymiaojirui@gmail.com","commits":1}]},"filePathRelative":"mysql/事务.md"}');export{h as comp,p as data};
